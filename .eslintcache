[{"C:\\Amit\\hackathon\\swift-coders\\src\\reportWebVitals.js":"1","C:\\Amit\\hackathon\\swift-coders\\src\\index.js":"2","C:\\Amit\\hackathon\\swift-coders\\src\\App.js":"3","C:\\Amit\\hackathon\\swift-coders\\src\\MockData\\RelationalGraphConfig.js":"4","C:\\Amit\\hackathon\\swift-coders\\src\\MockData\\mockData1.js":"5","C:\\Amit\\hackathon\\swift-coders\\src\\components\\NavBar\\Header.js":"6","C:\\Amit\\hackathon\\swift-coders\\src\\components\\BreadCrum\\Breadcrum.js":"7","C:\\Amit\\hackathon\\swift-coders\\src\\components\\RelationalGraph\\RelationalGraph.js":"8","C:\\Amit\\hackathon\\swift-coders\\src\\MockData\\mockData2.js":"9","C:\\Amit\\hackathon\\swift-coders\\src\\Utils\\graphDataTransformation.js":"10","C:\\Amit\\hackathon\\swift-coders\\src\\Utils\\findApiHelper.js":"11","C:\\Amit\\hackathon\\swift-coders\\src\\components\\EmptyDataScreen\\EmptyDataScreen.js":"12","C:\\Amit\\hackathon\\swift-coders\\src\\components\\Toolbar\\Toolbar.js":"13"},{"size":362,"mtime":1608187596232,"results":"14","hashOfConfig":"15"},{"size":478,"mtime":1611149989455,"results":"16","hashOfConfig":"15"},{"size":4299,"mtime":1611149989444,"results":"17","hashOfConfig":"15"},{"size":1817,"mtime":1611150326891,"results":"18","hashOfConfig":"15"},{"size":24214,"mtime":1610971662007,"results":"19","hashOfConfig":"15"},{"size":1525,"mtime":1611149989450,"results":"20","hashOfConfig":"15"},{"size":413,"mtime":1610963988096,"results":"21","hashOfConfig":"15"},{"size":2165,"mtime":1611150275303,"results":"22","hashOfConfig":"15"},{"size":28267,"mtime":1610971586760,"results":"23","hashOfConfig":"15"},{"size":14484,"mtime":1611149989447,"results":"24","hashOfConfig":"15"},{"size":714,"mtime":1611149989446,"results":"25","hashOfConfig":"15"},{"size":1410,"mtime":1611065339598,"results":"26","hashOfConfig":"15"},{"size":1951,"mtime":1611149989452,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1h6nocx",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Amit\\hackathon\\swift-coders\\src\\reportWebVitals.js",[],["57","58"],"C:\\Amit\\hackathon\\swift-coders\\src\\index.js",[],"C:\\Amit\\hackathon\\swift-coders\\src\\App.js",["59","60"],"import './App.css';\r\n// import {\r\n//   Switch,\r\n//   Route,\r\n//   withRouter\r\n// } from 'react-router-dom'\r\nimport graphConfig from './MockData/RelationalGraphConfig';\r\nimport Header from './components/NavBar/Header'\r\nimport RelationalGraph from './components/RelationalGraph/RelationalGraph'\r\nimport Breadcrum from './components/BreadCrum/Breadcrum';\r\nimport transformGraphData, { filterMapping } from './Utils/graphDataTransformation';\r\nimport { getNodes } from './Utils/findApiHelper'\r\nimport { useEffect, useState } from 'react';\r\nimport EmptyDataScreen from './components/EmptyDataScreen/EmptyDataScreen'\r\n\r\nfunction App({ history }) {\r\n\r\n  const [currentFilter, setCurrentFilter] = useState(10000);\r\n  const [graphData, setGraphData] = useState({ nodes: [], links: [] })\r\n  const [filteredData, setFilteredData] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [filterCriteria, setFilterCriteria] = useState([])\r\n  const [path, setPath] = useState('/')\r\n\r\n  // const history = useHistory()\r\n\r\n  const handleSearchSubmit = (queryType, searchValue) => {\r\n    if (queryType && searchValue) {\r\n      const config = {\r\n        resource: \"hierarchy\",\r\n        page: {\r\n          \"pageSize\": 1500,\r\n          \"page\": 1\r\n        },\r\n        q: {\r\n          op: \"and\",\r\n          criteria: [\r\n            {\r\n              op: \"eq\",\r\n              field: \"type\",\r\n              value: queryType === \"asset\" ? \"iot.Asset\" : 'iot.SpatialElement'\r\n            },\r\n            {\r\n              op: \"eq\",\r\n              field: \"name\",\r\n              value: searchValue\r\n            }\r\n          ]\r\n        }\r\n      }\r\n      getNodes(config, handleFindApiResponse)\r\n      setCurrentFilter(null)\r\n      setIsLoading(true)\r\n    }\r\n  }\r\n\r\n  const onNodeFilterSelect = (value) => {\r\n    setCurrentFilter(value)\r\n  }\r\n\r\n  const handleFindApiResponse = (data) => {\r\n    if (data && data.items) {\r\n      const { parsedData, filterData } = transformGraphData(data)\r\n      setFilterCriteria(filterData)\r\n      setGraphData(parsedData)\r\n      setFilteredData(null)\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const handleNavigation = (path) => {\r\n    console.log('>>>>>>>>>>>>> PATH', path)\r\n    setPath(path)\r\n  }\r\n\r\n  const onClickNode = (source, target) => {\r\n    const config = {\r\n      resource: \"hierarchy\",\r\n      page: {\r\n        pageSize: 1500,\r\n        page: 1\r\n      },\r\n      q: {\r\n        op: \"eq\",\r\n        field: \"id\",\r\n        value: target.label\r\n      }\r\n    }\r\n    getNodes(config, handleFindApiResponse)\r\n    setCurrentFilter(null)\r\n    setIsLoading(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (graphData.nodes.length > 0 && currentFilter && currentFilter !== 'No filter') {\r\n      let mappedObjectKey = ''\r\n      for (let key in filterMapping) {\r\n        if (currentFilter === filterMapping[key]) {\r\n          mappedObjectKey = key\r\n        }\r\n      }\r\n      const [direction, type] = mappedObjectKey.split('-')\r\n      const filteredLinks = graphData.links.filter(el => {\r\n        if (el.type && el.directed) {\r\n          return el.type.includes(type) && el.directed === direction\r\n        }\r\n        return true\r\n      })\r\n      const filteredNodes = graphData.nodes.filter(el => {\r\n        if (el.type && el.directed) {\r\n          return el.type.includes(type) && el.directed === direction\r\n        }\r\n        return true\r\n      })\r\n      setFilteredData({ links: filteredLinks, nodes: filteredNodes })\r\n    }\r\n    if (currentFilter === 'No filter') {\r\n      setFilteredData(null)\r\n    }\r\n  }, [currentFilter])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header onSubmit={handleSearchSubmit} handleNavigation={handleNavigation} />\r\n      {/* <Breadcrum /> */}\r\n      {(isLoading || graphData.nodes.length === 0) && path === '/' && <EmptyDataScreen loading={isLoading} />}\r\n      {!isLoading && graphData.nodes.length > 0 && <div style={{ display: 'flex' }}>\r\n            {path === '/' && <RelationalGraph\r\n              data={filteredData ? filteredData : graphData}\r\n              config={graphConfig}\r\n              filters={filterCriteria}\r\n              onNodeFilterSelect={onNodeFilterSelect}\r\n              onClickNode={onClickNode}\r\n            />} \r\n      </div>}\r\n      {path !== '/' && <div>Hello, world</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n","C:\\Amit\\hackathon\\swift-coders\\src\\MockData\\RelationalGraphConfig.js",[],"C:\\Amit\\hackathon\\swift-coders\\src\\MockData\\mockData1.js",[],"C:\\Amit\\hackathon\\swift-coders\\src\\components\\NavBar\\Header.js",[],"C:\\Amit\\hackathon\\swift-coders\\src\\components\\BreadCrum\\Breadcrum.js",[],"C:\\Amit\\hackathon\\swift-coders\\src\\components\\RelationalGraph\\RelationalGraph.js",[],"C:\\Amit\\hackathon\\swift-coders\\src\\MockData\\mockData2.js",[],"C:\\Amit\\hackathon\\swift-coders\\src\\Utils\\graphDataTransformation.js",[],"C:\\Amit\\hackathon\\swift-coders\\src\\Utils\\findApiHelper.js",["61","62","63"],"const url = \"https://dev-cbld-sas-findapi.dev.forge.connected.honeywell.com/v1/search\"\r\nconst ApiKey = 'HdsXlhBoGZgsifFSOI0mGCCGB4qLw0oxNYxtiZeO' // don't push code with this detail\r\nconst customerId = 'idf0a29149-660a-4493-bba1-f3ffa4388078' // don't push code with this detail\r\n\r\nexport const getNodes = (data, callBack) => {\r\n\r\n    const config = {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'customerId':customerId,\r\n          'ApiKey': ApiKey,\r\n          'Access-Control-Allow-Origin': '*'\r\n        },\r\n        body: JSON.stringify(data),\r\n    }\r\n\r\n    fetch(url, config)\r\n    .then(response => response.json())\r\n    .then(data => callBack(data))\r\n}","C:\\Amit\\hackathon\\swift-coders\\src\\components\\EmptyDataScreen\\EmptyDataScreen.js",[],"C:\\Amit\\hackathon\\swift-coders\\src\\components\\Toolbar\\Toolbar.js",[],{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","severity":1,"message":"69","line":5,"column":3,"nodeType":"70","messageId":"71","endLine":5,"endColumn":7},{"ruleId":"72","severity":1,"message":"73","line":105,"column":6,"nodeType":"74","endLine":105,"endColumn":21,"suggestions":"75"},{"ruleId":"68","severity":1,"message":"76","line":5,"column":7,"nodeType":"70","messageId":"71","endLine":5,"endColumn":17},{"ruleId":"68","severity":1,"message":"77","line":6,"column":7,"nodeType":"70","messageId":"71","endLine":6,"endColumn":15},{"ruleId":"68","severity":1,"message":"78","line":7,"column":7,"nodeType":"70","messageId":"71","endLine":7,"endColumn":11},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'graphData.links' and 'graphData.nodes'. Either include them or remove the dependency array.","ArrayExpression",["81"],"'chillerSvg' is assigned a value but never used.","'chiller2' is assigned a value but never used.","'ahu1' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"82","fix":"83"},"Update the dependencies array to be: [currentFilter, graphData.links, graphData.nodes]",{"range":"84","text":"85"},[2949,2964],"[currentFilter, graphData.links, graphData.nodes]"]