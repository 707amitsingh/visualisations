[{"C:\\Work\\POC\\visualisations\\src\\index.js":"1","C:\\Work\\POC\\visualisations\\src\\reportWebVitals.js":"2","C:\\Work\\POC\\visualisations\\src\\App.js":"3","C:\\Work\\POC\\visualisations\\src\\MockData\\spaceData.js":"4","C:\\Work\\POC\\visualisations\\src\\Utils\\findApiHelper.js":"5","C:\\Work\\POC\\visualisations\\src\\components\\EmptyDataScreen\\EmptyDataScreen.js":"6","C:\\Work\\POC\\visualisations\\src\\components\\SpaceDetail\\SpaceDetail.js":"7","C:\\Work\\POC\\visualisations\\src\\components\\BreadCrum\\Breadcrum.js":"8","C:\\Work\\POC\\visualisations\\src\\MockData\\RelationalGraphConfig.js":"9","C:\\Work\\POC\\visualisations\\src\\Utils\\graphDataTransformation.js":"10","C:\\Work\\POC\\visualisations\\src\\components\\NavBar\\Header.js":"11","C:\\Work\\POC\\visualisations\\src\\components\\RelationalGraph\\RelationalGraph.js":"12","C:\\Work\\POC\\visualisations\\src\\components\\Toolbar\\Toolbar.js":"13"},{"size":478,"mtime":1611152253230,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1611031107864,"results":"16","hashOfConfig":"15"},{"size":4629,"mtime":1611204436060,"results":"17","hashOfConfig":"15"},{"size":1599,"mtime":1611202863569,"results":"18","hashOfConfig":"15"},{"size":714,"mtime":1611152253223,"results":"19","hashOfConfig":"15"},{"size":1275,"mtime":1611204473110,"results":"20","hashOfConfig":"15"},{"size":9734,"mtime":1611203496786,"results":"21","hashOfConfig":"15"},{"size":413,"mtime":1611031107856,"results":"22","hashOfConfig":"15"},{"size":1817,"mtime":1611152253222,"results":"23","hashOfConfig":"15"},{"size":14484,"mtime":1611152253225,"results":"24","hashOfConfig":"15"},{"size":1525,"mtime":1611152253226,"results":"25","hashOfConfig":"15"},{"size":2165,"mtime":1611152253227,"results":"26","hashOfConfig":"15"},{"size":1951,"mtime":1611152253229,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"6ciioa",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Work\\POC\\visualisations\\src\\index.js",[],["57","58"],"C:\\Work\\POC\\visualisations\\src\\reportWebVitals.js",[],"C:\\Work\\POC\\visualisations\\src\\App.js",["59","60"],"import './App.css';\r\n// import {\r\n//   Switch,\r\n//   Route,\r\n//   withRouter\r\n// } from 'react-router-dom'\r\nimport graphConfig from './MockData/RelationalGraphConfig';\r\nimport Header from './components/NavBar/Header'\r\nimport RelationalGraph from './components/RelationalGraph/RelationalGraph'\r\nimport Breadcrum from './components/BreadCrum/Breadcrum';\r\nimport transformGraphData, { filterMapping } from './Utils/graphDataTransformation';\r\nimport { getNodes } from './Utils/findApiHelper'\r\nimport { useEffect, useState } from 'react';\r\nimport EmptyDataScreen from './components/EmptyDataScreen/EmptyDataScreen'\r\nimport SpaceDetail from './components/SpaceDetail/SpaceDetail'\r\nimport spaceData from './MockData/spaceData';\r\n\r\nfunction App({ history }) {\r\n\r\n  const [currentFilter, setCurrentFilter] = useState(10000);\r\n  const [graphData, setGraphData] = useState({ nodes: [], links: [] })\r\n  const [filteredData, setFilteredData] = useState(null)\r\n  const [isLoading, setIsLoading] = useState(false)\r\n  const [filterCriteria, setFilterCriteria] = useState([])\r\n  const [path, setPath] = useState('/')\r\n  const [searchString, setSearchString] = useState(\"\")\r\n  // const history = useHistory()\r\n\r\n  const handleSearchSubmit = (queryType, searchValue) => {\r\n    \r\n    if (queryType && searchValue) {\r\n      if (path === '/') {\r\n        const config = {\r\n          resource: \"hierarchy\",\r\n          page: {\r\n            \"pageSize\": 1500,\r\n            \"page\": 1\r\n          },\r\n          q: {\r\n            op: \"and\",\r\n            criteria: [\r\n              {\r\n                op: \"eq\",\r\n                field: \"type\",\r\n                value: queryType === \"asset\" ? \"iot.Asset\" : 'iot.SpatialElement'\r\n              },\r\n              {\r\n                op: \"eq\",\r\n                field: \"name\",\r\n                value: searchValue\r\n              }\r\n            ]\r\n          }\r\n        }\r\n        getNodes(config, handleFindApiResponse)\r\n        setCurrentFilter(null)\r\n        setIsLoading(true)\r\n\r\n      } else {\r\n        setSearchString(searchValue)\r\n      }\r\n    }\r\n  }\r\n\r\n  const onNodeFilterSelect = (value) => {\r\n    setCurrentFilter(value)\r\n  }\r\n\r\n  const handleFindApiResponse = (data) => {\r\n    if (data && data.items) {\r\n      const { parsedData, filterData } = transformGraphData(data)\r\n      setFilterCriteria(filterData)\r\n      setGraphData(parsedData)\r\n      setFilteredData(null)\r\n    }\r\n    setIsLoading(false)\r\n  }\r\n\r\n  const handleNavigation = (path) => {\r\n    console.log('>>>>>>>>>>>>> PATH', path)\r\n    setPath(path)\r\n  }\r\n\r\n  const onClickNode = (source, target) => {\r\n    const config = {\r\n      resource: \"hierarchy\",\r\n      page: {\r\n        pageSize: 1500,\r\n        page: 1\r\n      },\r\n      q: {\r\n        op: \"eq\",\r\n        field: \"id\",\r\n        value: target.label\r\n      }\r\n    }\r\n    getNodes(config, handleFindApiResponse)\r\n    setCurrentFilter(null)\r\n    setIsLoading(true)\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (graphData.nodes.length > 0 && currentFilter && currentFilter !== 'No filter') {\r\n      let mappedObjectKey = ''\r\n      for (let key in filterMapping) {\r\n        if (currentFilter === filterMapping[key]) {\r\n          mappedObjectKey = key\r\n        }\r\n      }\r\n      const [direction, type] = mappedObjectKey.split('-')\r\n      const filteredLinks = graphData.links.filter(el => {\r\n        if (el.type && el.directed) {\r\n          return el.type.includes(type) && el.directed === direction\r\n        }\r\n        return true\r\n      })\r\n      const filteredNodes = graphData.nodes.filter(el => {\r\n        if (el.type && el.directed) {\r\n          return el.type.includes(type) && el.directed === direction\r\n        }\r\n        return true\r\n      })\r\n      setFilteredData({ links: filteredLinks, nodes: filteredNodes })\r\n    }\r\n    if (currentFilter === 'No filter') {\r\n      setFilteredData(null)\r\n    }\r\n  }, [currentFilter])\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header onSubmit={handleSearchSubmit} handleNavigation={handleNavigation} />\r\n      {/* <Breadcrum /> */}\r\n      {(isLoading || graphData.nodes.length === 0) && path === '/' && <EmptyDataScreen loading={isLoading} />}\r\n      {!isLoading && graphData.nodes.length > 0 && <div style={{ display: 'flex' }}>\r\n        {path === '/' && <RelationalGraph\r\n          data={filteredData ? filteredData : graphData}\r\n          config={graphConfig}\r\n          filters={filterCriteria}\r\n          onNodeFilterSelect={onNodeFilterSelect}\r\n          onClickNode={onClickNode}\r\n        />}\r\n      </div>}\r\n      {path !== '/' && <SpaceDetail data={spaceData} spaceName={searchString}></SpaceDetail>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App\r\n","C:\\Work\\POC\\visualisations\\src\\MockData\\spaceData.js",[],"C:\\Work\\POC\\visualisations\\src\\Utils\\findApiHelper.js",[],"C:\\Work\\POC\\visualisations\\src\\components\\EmptyDataScreen\\EmptyDataScreen.js",[],"C:\\Work\\POC\\visualisations\\src\\components\\SpaceDetail\\SpaceDetail.js",["61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76"],"import React, { useEffect, useState } from 'react';\r\nimport './SpaceDetail.css';\r\nimport { Card, Container, Row, Col } from 'react-bootstrap';\r\nimport { House, Thermometer, Soundwave, Forward } from 'react-bootstrap-icons';\r\nimport { getNodes } from '../../Utils/findApiHelper';\r\n\r\nconst SpaceDetail = ({ data, spaceName }) => {\r\n    const [apiRes1, setApiRes1] = useState()\r\n    const [apiRes2, setApiRes2] = useState()\r\n    const [apiRes3, setApiRes3] = useState()\r\n    const [apiRes4, setApiRes4] = useState()\r\n    const [apiRes5, setApiRes5] = useState()\r\n    const [windowSize, setWindowSize] = useState(window.innerWidth)\r\n    const [cardValues, setCardValues] = useState()\r\n    const handleResize = () => {\r\n        setWindowSize(window.innerWidth)\r\n    }\r\n\r\n    const config1 = {\r\n        resource: \"hierarchy\",\r\n        page: {\r\n            \"pageSize\": 1500,\r\n            \"page\": 1\r\n        },\r\n        q: {\r\n            op: \"and\",\r\n            criteria: [\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"type\",\r\n                    value: \"iot.SpatialElement\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"name\",\r\n                    value: spaceName\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    const config2 = {\r\n        resource: \"hierarchy\",\r\n        page: {\r\n            \"pageSize\": 1500,\r\n            \"page\": 1\r\n        },\r\n        q: {\r\n            op: \"and\",\r\n            criteria: [\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"relationships.id\",\r\n                    value: \"iot.SUPPLIES_SPATIAL_ELEMENT\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"relationships.relationshipEntityList.type\",\r\n                    value: \"iot.SpatialElement\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"relationships.relationshipEntityList.id\",\r\n                    value: \"\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"points.role\",\r\n                    value: \"Supply Air Temperature Setpoint\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    const config3 = {\r\n        resource: \"hierarchy\",\r\n        page: {\r\n            \"pageSize\": 1500,\r\n            \"page\": 1\r\n        },\r\n        q: {\r\n            op: \"and\",\r\n            criteria: [\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"type\",\r\n                    value: \"iot.SpatialElement\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"name\",\r\n                    value: spaceName\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"relationships.id\",\r\n                    value: \"iot.SUPPLIES_SPATIAL_ELEMENT\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"relationships.relationshipEntityList.assetType\",\r\n                    value: \"Variable Air Volume\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    const config4 = {\r\n        resource: \"hierarchy\",\r\n        page: {\r\n            \"pageSize\": 1500,\r\n            \"page\": 1\r\n        },\r\n        q: {\r\n            op: \"and\",\r\n            criteria: [\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"type\",\r\n                    value: \"iot.Asset\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"relationships.relationshipEntityList.id\",\r\n                    value: \"Y3VzdG9tZXIuaThiNjRjZDY0LWJlZjctNDMwMi05MzQxLWJlNjg0M2ExMDYzOA==\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"relationships.id\",\r\n                    value: \"iot.SUPPLIES_ASSET\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"relationships.direction\",\r\n                    value: \"OUT\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"assetType\",\r\n                    value: \"Air Handling Unit\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    const config5 = {\r\n        resource: \"hierarchy\",\r\n        page: {\r\n            \"pageSize\": 1500,\r\n            \"page\": 1\r\n        },\r\n        q: {\r\n            op: \"and\",\r\n            criteria: [\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"type\",\r\n                    value: \"iot.Asset\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"relationships.relationshipEntityList.id\",\r\n                    value: \"OWI2YjRjMTEtYWYzMy00OWE2LWI3NzMtZDFhNGVlMWQzYmRi\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"relationships.id\",\r\n                    value: \"iot.SUPPLIES_ASSET\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"relationships.direction\",\r\n                    value: \"OUT\"\r\n                },\r\n                {\r\n                    op: \"eq\",\r\n                    field: \"assetType\",\r\n                    value: \"Chiller\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('resize', handleResize)\r\n\r\n        return _ => {\r\n            window.removeEventListener('resize', handleResize)\r\n        }\r\n    }, [windowSize])\r\n\r\n    const resetValue = () => {\r\n        data[0][\"questions\"][0].value = \"\";\r\n        data[0][\"questions\"][1].value = \"\";\r\n        data[0][\"questions\"][2].value = \"\";\r\n        data[0][\"questions\"][5].value = \"\";\r\n        setCardValues(data);\r\n    }\r\n    const getCard1Data = () => {\r\n        data[0][\"questions\"][0].question = `What is the temperature point name in ${spaceName} `;\r\n        data[0][\"questions\"][1].question = `Which VAV is serving Air to ${spaceName}`;\r\n        getNodes(config1, handleCard1Response);\r\n    }\r\n\r\n    const getCard1Api2Data = (res) => {\r\n        config2.q.criteria.find(x => x.field == \"relationships.relationshipEntityList.id\").value = res.items[0].id;\r\n        getNodes(config2, handleApi2Response);\r\n    }\r\n\r\n    const getApi3Data = (res) => {\r\n        const _data = res.items[0]\r\n        data[0][\"questions\"][2].question = `Which AHU is serving cooled Air to ${_data.name}`;\r\n        getNodes(config3, handleApi3Response);\r\n    }\r\n\r\n    const getApi4Data = (res) => {\r\n        const _data = res.items[0].relationships.find(x => x.direction === \"IN\" && x.name === \"iot.SUPPLIES_SPATIAL_ELEMENT\").relationshipEntityList.find(x => x.assetType === \"Variable Air Volume\");\r\n        config4.q.criteria.find(x => x.field == \"relationships.relationshipEntityList.id\").value = _data.id\r\n        getNodes(config4, handleApi4Response);\r\n    }\r\n\r\n    const getApi5Data = (res) => {\r\n        config5.q.criteria.find(x => x.field == \"relationships.relationshipEntityList.id\").value = res.items[0].id\r\n        getNodes(config5, handleApi5Response);\r\n    }\r\n\r\n    const handleCard1Response = (res) => {\r\n        if (res.items[0]) {\r\n            setApiRes1(res);\r\n            getCard1Api2Data(res);\r\n        } else {\r\n            resetValue();\r\n        }\r\n    }\r\n\r\n    const handleApi2Response = (res) => {\r\n        data[0][\"questions\"][0].value = res.items[0].points.find(x => x.role == \"Supply Air Temperature Setpoint\").name\r\n        setApiRes2(res);\r\n        getApi3Data(res);\r\n    }\r\n\r\n    const handleApi3Response = (res) => {\r\n        data[0][\"questions\"][1].value = res.items[0].relationships.find(x => x.name == \"iot.SUPPLIES_SPATIAL_ELEMENT\").relationshipEntityList.find(x => x.assetType == \"Variable Air Volume\").name\r\n        setApiRes3(res);\r\n        getApi4Data(res);\r\n    }\r\n\r\n    const handleApi4Response = (res) => {\r\n        data[0][\"questions\"][5].question = `Which chiller is serving ${res.items[0].name}`;\r\n        data[0][\"questions\"][2].value = res.items[0].name\r\n        setApiRes4(res);\r\n        getApi5Data(res);\r\n    }\r\n\r\n    const handleApi5Response = (res) => {\r\n        data[0][\"questions\"][5].value = res.items[0].name\r\n        setApiRes5(res);\r\n    }\r\n\r\n    const getCardIcon = (room) => {\r\n        if (room.id == \"1\") {\r\n            return <House></House>\r\n        } else if (room.id == \"2\") {\r\n            return <Soundwave></Soundwave>\r\n        } else if (room.id == \"3\") {\r\n            return <Thermometer></Thermometer>\r\n        }\r\n        return (<Forward></Forward>);\r\n    }\r\n    useEffect(() => {\r\n        if (spaceName) {\r\n            resetValue();\r\n            getCard1Data()\r\n        }\r\n    }, [spaceName])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Container><br />\r\n                <Row>\r\n                    {data[0][\"questions\"].filter(x => x.value !== \"\").map((elem, index) => (\r\n                        <Col sm={6} key={index}>\r\n                            <Card className=\"info-box l-bg-green order-info-box\">\r\n                                <Card.Body className=\"info-box-block\">\r\n                                    <h5 className=\"m-b-20\">{elem.question}</h5>\r\n                                    <h6 className=\"text-left\">\r\n                                        <i className=\"m-r-5\">\r\n                                            {getCardIcon(elem)}\r\n                                        </i><span >{elem.value}</span>\r\n                                    </h6>\r\n                                </Card.Body>\r\n                            </Card>\r\n                        </Col>\r\n                    ))}\r\n                </Row>\r\n            </Container>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default SpaceDetail;","C:\\Work\\POC\\visualisations\\src\\components\\BreadCrum\\Breadcrum.js",[],"C:\\Work\\POC\\visualisations\\src\\MockData\\RelationalGraphConfig.js",[],"C:\\Work\\POC\\visualisations\\src\\Utils\\graphDataTransformation.js",[],"C:\\Work\\POC\\visualisations\\src\\components\\NavBar\\Header.js",[],"C:\\Work\\POC\\visualisations\\src\\components\\RelationalGraph\\RelationalGraph.js",[],"C:\\Work\\POC\\visualisations\\src\\components\\Toolbar\\Toolbar.js",[],{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":10,"column":8,"nodeType":"83","messageId":"84","endLine":10,"endColumn":17},{"ruleId":"85","severity":1,"message":"86","line":128,"column":6,"nodeType":"87","endLine":128,"endColumn":21,"suggestions":"88"},{"ruleId":"81","severity":1,"message":"89","line":8,"column":12,"nodeType":"83","messageId":"84","endLine":8,"endColumn":19},{"ruleId":"81","severity":1,"message":"90","line":9,"column":12,"nodeType":"83","messageId":"84","endLine":9,"endColumn":19},{"ruleId":"81","severity":1,"message":"91","line":10,"column":12,"nodeType":"83","messageId":"84","endLine":10,"endColumn":19},{"ruleId":"81","severity":1,"message":"92","line":11,"column":12,"nodeType":"83","messageId":"84","endLine":11,"endColumn":19},{"ruleId":"81","severity":1,"message":"93","line":12,"column":12,"nodeType":"83","messageId":"84","endLine":12,"endColumn":19},{"ruleId":"81","severity":1,"message":"94","line":14,"column":12,"nodeType":"83","messageId":"84","endLine":14,"endColumn":22},{"ruleId":"95","severity":1,"message":"96","line":206,"column":46,"nodeType":"97","messageId":"98","endLine":206,"endColumn":48},{"ruleId":"95","severity":1,"message":"96","line":218,"column":46,"nodeType":"97","messageId":"98","endLine":218,"endColumn":48},{"ruleId":"95","severity":1,"message":"96","line":223,"column":46,"nodeType":"97","messageId":"98","endLine":223,"endColumn":48},{"ruleId":"95","severity":1,"message":"96","line":237,"column":78,"nodeType":"97","messageId":"98","endLine":237,"endColumn":80},{"ruleId":"95","severity":1,"message":"96","line":243,"column":85,"nodeType":"97","messageId":"98","endLine":243,"endColumn":87},{"ruleId":"95","severity":1,"message":"96","line":243,"column":165,"nodeType":"97","messageId":"98","endLine":243,"endColumn":167},{"ruleId":"95","severity":1,"message":"96","line":261,"column":21,"nodeType":"97","messageId":"98","endLine":261,"endColumn":23},{"ruleId":"95","severity":1,"message":"96","line":263,"column":28,"nodeType":"97","messageId":"98","endLine":263,"endColumn":30},{"ruleId":"95","severity":1,"message":"96","line":265,"column":28,"nodeType":"97","messageId":"98","endLine":265,"endColumn":30},{"ruleId":"85","severity":1,"message":"99","line":275,"column":8,"nodeType":"87","endLine":275,"endColumn":19,"suggestions":"100"},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'Breadcrum' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'graphData.links' and 'graphData.nodes'. Either include them or remove the dependency array.","ArrayExpression",["103"],"'apiRes1' is assigned a value but never used.","'apiRes2' is assigned a value but never used.","'apiRes3' is assigned a value but never used.","'apiRes4' is assigned a value but never used.","'apiRes5' is assigned a value but never used.","'cardValues' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'getCard1Data' and 'resetValue'. Either include them or remove the dependency array.",["104"],"no-global-assign","no-unsafe-negation",{"desc":"105","fix":"106"},{"desc":"107","fix":"108"},"Update the dependencies array to be: [currentFilter, graphData.links, graphData.nodes]",{"range":"109","text":"110"},"Update the dependencies array to be: [getCard1Data, resetValue, spaceName]",{"range":"111","text":"112"},[3836,3851],"[currentFilter, graphData.links, graphData.nodes]",[8697,8708],"[getCard1Data, resetValue, spaceName]"]